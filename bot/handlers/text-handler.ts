import { driver } from '../../database/db-driver';
import { ChatState, State } from '../../database/entities/chat-state';
import { Price } from '../../database/entities/price';
import { Product } from '../../database/entities/product';
import { Subscription } from '../../database/entities/subscription';
import { getStoreProvider } from '../../store/provider';
import { logger } from '../../utils/logger';
import { getStoreExampleLink, getStoreLinkRegExp } from '../../utils/store';
import { Command, CommandContext } from './types';

export async function textHandler(ctx: CommandContext) {
    if (ctx.chatState?.state === State.AddProduct) {
        return await addProductHandler(ctx, ctx.chatState);
    }

    // not found chat state
    ctx.replyWithSticker('CAACAgIAAxkBAAPhYneTKx_dcDOYQbazLwhEKAsV8LgAAvsUAAKEPslLcnZGpyqRn64kBA');
}

async function addProductHandler(ctx: CommandContext, chatState: ChatState) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏
    if (!getStoreLinkRegExp(chatState.store).test(ctx.message.text)) {
        const message = `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.\n\nüí° –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: ${getStoreExampleLink(chatState.store)}`;
        return ctx.reply(message, { disable_web_page_preview: true });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let product: Product;
    let price: Price;
    try {
        const storeProvider = getStoreProvider(chatState.store);
        const data = await storeProvider.getData(ctx.message.text);
        product = data.product;
        price = data.price;
    } catch (error) {
        logger.error(error);
        return ctx.reply(`üò≠ –û—à–∏–±–∫–∞. ${error}`);
    }

    const userSubscriptions = await Subscription.getByUser(driver, { chatId: ctx.chatId });

    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–¥–ø–∏—Å–æ–∫
    if (userSubscriptions.length >= 5) {
        return ctx.reply('üò¨ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ —á—Ç–æ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (userSubscriptions.find((sub) => sub.productId === product.id)) {
        return ctx.reply('ü§î –ü–æ—Ö–æ–∂–µ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!(await Product.get(driver, { id: product.id }))) {
        await product.insert(driver);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
    await price.insert(driver);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await Subscription.create({ chatId: ctx.chatId, productId: product.id }).insert(driver);

    const message =
        `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ \`${product.id}\` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
        `üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /${Command.List}.`;
    ctx.reply(message, { parse_mode: 'Markdown' });

    // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    await chatState.remove(driver);
}
