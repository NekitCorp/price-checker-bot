import { State } from '../../database/entities/chat-state';
import { Price } from '../../database/entities/price';
import { Product, ProductId } from '../../database/entities/product';
import { Subscription } from '../../database/entities/subscription';
import { getStoreProvider } from '../../store';
import { TextHandler } from '../../telegram-bot/types';
import { Command } from '../types';

export const textHandler: TextHandler = async (props) => {
    const { ctx } = props;

    if (ctx.chatState?.state === State.AddProduct) {
        await addProductHandler(props);
        return;
    }

    // not found chat state
    ctx.replyWithSticker('CAACAgIAAxkBAAPhYneTKx_dcDOYQbazLwhEKAsV8LgAAvsUAAKEPslLcnZGpyqRn64kBA');
};

const addProductHandler: TextHandler = async ({ ctx, logger, dbDriver }) => {
    if (!ctx.chatState) return;

    const storeProvider = getStoreProvider(ctx.chatState.store, logger);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏
    if (!storeProvider.checkLink(ctx.message.text)) {
        const message = `‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.\n\nüí° –ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: ${storeProvider.exampleLink}`;
        ctx.reply(message, { disable_web_page_preview: true });
        return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    let product: Product;
    let priceEntity: Price;
    try {
        const { id, name, price, store, url } = await storeProvider.getData(ctx.message.text);
        product = Product.create({ id: id as ProductId, name, store, url });
        priceEntity = Price.create({ productId: id as ProductId, price });
    } catch (error) {
        logger.error(error, { context: ctx, scope: 'ERROR_ADD_PRODUCT_HANDLER' });
        ctx.reply(`üò≠ –û—à–∏–±–∫–∞. ${error}`);
        return;
    }

    const userSubscriptions = await Subscription.getByUser(dbDriver, { chatId: ctx.chatId });

    // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 5 –ø–æ–¥–ø–∏—Å–æ–∫
    if (userSubscriptions.length >= 5) {
        ctx.reply('üò¨ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫.');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ —á—Ç–æ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (userSubscriptions.find((sub) => sub.productId === product.id)) {
        ctx.reply('ü§î –ü–æ—Ö–æ–∂–µ —Ç–∞–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
        return;
    }

    // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if (!(await Product.get(dbDriver, { id: product.id }))) {
        await product.insert(dbDriver);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
    await priceEntity.insert(dbDriver);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    await Subscription.create({ chatId: ctx.chatId, productId: product.id }).insert(dbDriver);

    const message =
        `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ \`${product.id}\` —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
        `üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /${Command.List}.`;
    ctx.reply(message, { parse_mode: 'Markdown' });

    // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    await ctx.chatState.remove(dbDriver);
};
