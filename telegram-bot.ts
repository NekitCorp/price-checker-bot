import { Context, Telegraf } from 'telegraf';

enum Command {
    Help = 'help',
    List = 'list',
    Add = 'add',
}

export class TelegramBot {
    private readonly bot: Telegraf;

    constructor(token: string) {
        this.bot = new Telegraf(token);
        this.registerMiddlewares();
        this.registerHandlers();
    }

    public launch() {
        this.bot.launch().then(() => console.log(`Telegram bot ${this.bot.botInfo?.first_name} is running.`));
    }

    public stop(reason?: string) {
        console.log(`Telegram bot ${this.bot.botInfo?.first_name} stops...`);
        this.bot.stop(reason);
        console.log(`Telegram bot ${this.bot.botInfo?.first_name} stopped.`);
    }

    private registerMiddlewares() {
        this.bot.use(async (ctx, next) => {
            console.log(ctx.update);
            console.time(`Processing update ${ctx.update.update_id}`);
            await next();
            console.timeEnd(`Processing update ${ctx.update.update_id}`);
        });
    }

    private registerHandlers() {
        this.bot.start((ctx) => {
            const username = ctx.message.from.first_name || ctx.message.from.username;
            ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${username}. ` + this.getHelpMessage(), {
                parse_mode: 'Markdown',
                disable_web_page_preview: true,
            });
        });
        this.bot.help((ctx) =>
            ctx.reply(this.getHelpMessage(), { parse_mode: 'Markdown', disable_web_page_preview: true }),
        );

        this.bot.command(Command.List, (ctx) => this.replySubscribesList(ctx));
        this.bot.action(Command.List, (ctx) => {
            ctx.deleteMessage();
            this.replySubscribesList(ctx);
        });
        this.bot.action(/^remove subscribe[0-9]+$/, (ctx) => {
            ctx.deleteMessage();
            this.replySubscribesList(ctx);
            ctx.reply(`–ü–æ–¥–ø–∏—Å–∫–∞ ${ctx.callbackQuery.data} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!`);
        });
        this.bot.action(/^subscribe[0-9]+$/, (ctx) => {
            ctx.deleteMessage();
            ctx.reply(`–î–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π ${ctx.callbackQuery.data}:`, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üîô –ù–∞–∑–∞–¥', callback_data: Command.List },
                            { text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `remove ${ctx.callbackQuery.data}` },
                        ],
                    ],
                },
                parse_mode: 'Markdown',
            });
        });
    }

    private getHelpMessage(): string {
        return `–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ [store77](https://store77.net/) –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º. –Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.

üîº - —Ü–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä –ø–æ–≤—ã—Å–∏–ª–∞—Å—å
üîΩ - —Ü–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä —Å–Ω–∏–∑–∏–ª–∞—Å—å

*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*
/${Command.Help} - –ø–æ–º–æ—â—å
/${Command.List} - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
/${Command.Add} - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
`;
    }

    private replySubscribesList(ctx: Context) {
        // TODO: empty list
        ctx.reply('–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–ü–æ–¥–ø–∏—Å–∫–∞ 1', callback_data: 'subscribe1' },
                        { text: '–ü–æ–¥–ø–∏—Å–∫–∞ 2', callback_data: 'subscribe2' },
                        { text: '–ü–æ–¥–ø–∏—Å–∫–∞ 3', callback_data: 'subscribe3' },
                        { text: '–ü–æ–¥–ø–∏—Å–∫–∞ 4', callback_data: 'subscribe4' },
                    ],
                ],
            },
            parse_mode: 'Markdown',
        });
    }
}
